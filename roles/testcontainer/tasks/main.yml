# vim:ft=ansible
---
# download a known-good container and save it to glance
- name: Pulling {{ container_image }}
  command: docker pull {{ container_image }}
  tags:
   - docker
   - container_test

# check for existing glance image
- name: checking for existing glance image
  shell: . {{ keystone_filename }}; glance image-show {{ container_image }}
  register: glance_uuid
  ignore_errors: true
  tags:
    - glance
    - container_test

- debug: msg="glance image already exists with UUID {{ glance_uuid.stdout }}"
  when: glance_uuid|success
  tags:
    - glance
    - container_test

- name: Saving container to glance
  shell: . {{ keystone_filename }} && docker save {{ container_image }} | glance image-create --is-public=True --container-format=docker --disk-format=raw --name {{ glance_imagename }}
  when: glance_uuid|failed
  tags:
   - docker
   - container_test

 # check neutron for an existing 'testnet' network
- name: Check if 'testnet' exists
  shell: . {{ keystone_filename }}; neutron net-show testnet
  ignore_errors: true
  register: net_check
  tags:
    - neutron
    - container_test

- name: Creating testnet
  shell: >
    . {{ keystone_filename }};
    neutron net-create {{ neutron_netname }}
  register: net_create
  when: net_check|failed
  tags:
    - neutron
    - container_test

- name: Check if 'testnet-subnet' exists
  shell: . {{ keystone_filename }}; neutron subnet-show {{ neutron_subnetname }}
  ignore_errors: true
  register: subnet_check
  tags:
    - neutron
    - container_test

- name: create testnet subnet
  shell: . {{ keystone_filename }}; neutron subnet-create --name={{ neutron_subnetname }} {{ neutron_netname }} {{ neutron_subnetcidr }}
  when: subnet_check|failed
  tags:
    - neutron
    - container_test

- name: grabbing testnet-subnet uuid
  shell: . {{ keystone_filename }}; neutron subnet-list | grep {{ neutron_subnetname }} | gawk -F' ' '{print $2}'
  register: testnet-subnet_uuid
  tags:
    - neutron
    - container_test

# store testnet uuid
- name: get testnet uuid
  shell: . {{ keystone_filename }}; neutron net-list | grep {{ neutron_netname }} | gawk -F' ' '{print $2}'
  register: testnet_uuid
  tags:
    - neutron
    - container_test

# check to see if external network has already been set up
- name: check for existing external network
  shell: . {{ keystone_filename }}; neutron net-show {{ neutron_ext_net_name }}
  ignore_errors: true
  register: external_net_check
  tags:
    - neutron
    - container_test

- debug: msg="external network does not exist, creating..."
  when: external_net_check|failed
  tags:
    - neutron
    - container_test

# create external network and neutron router
- name: create external network
  shell: . {{ keystone_filename }}; neutron net-create {{ neutron_ext_net_name }} --router:external --provider:network_type={{ neutron_ext_network_type }} --provider:physical_network={{ neutron_flat_net_name }} --shared
  when: external_net_check|failed
  tags:
    - neutron
    - container_test

- name: get external network UUID
  shell: . {{ keystone_filename }}; neutron net-list | grep {{ neutron_ext_net_name }} | gawk -F' ' '{print $2}'
  register: external_uuid
  tags:
    - neutron
    - container_test

# check to see if external subnet already exists
- name: checking for existing external subnet
  shell: . {{ keystone_filename}}; neutron subnet-show {{ neutron_ext_subnet_name }}
  ignore_errors: true
  register: external_subnet_check
  tags:
    - neutron
    - container_test

- debug: msg="external subnet does not exist, creating..."
  when: external_subnet_check|failed
  tags:
    - neutron
    - container_test

- name: create external subnet
  shell: . {{ keystone_filename }}; neutron subnet-create --name {{ neutron_ext_subnet_name }} --gateway {{ neutron_ext_gateway }} --disable-dhcp --allocation-pool start={{ neutron_ext_allocation.start }},end={{ neutron_ext_allocation.end }} {{ neutron_ext_net_name }} {{ neutron_ext_subnet_cidr }}
  when: external_subnet_check|failed
  tags:
    - neutron
    - container_test

- name: get container image uuid
  shell: . {{ keystone_filename }}; glance image-list | grep {{ glance_imagename }} | gawk -F' ' '{print $2}'
  register: image_uuid
  tags:
    - glance
    - container_test

- name: get external subnet UUID
  shell: . {{ keystone_filename }}; neutron subnet-list | grep {{ neutron_ext_subnet_name }} | gawk -F' ' '{print $2}'
  register: external-subnet_uuid
  tags:
    - neutron
    - container_test

# create router
- name: create router
  shell: . {{ keystone_filename }}; neutron router-create {{ neutron_router_name }}
  tags:
    - neutron
    - container_test

- name: set router gateway
  shell: . {{ keystone_filename }}; neutron router-gateway-set {{ neutron_router_name }} {{ external_uuid.stdout }}
  tags:
    - neutron
    - container_test

- debug: msg="Creating router {{ neutron_router_name }} using the {{ neutron_subnetname }} subnet"
  tags:
    - neutron
    - container_test

- name: set internal router interface
  shell: . {{ keystone_filename }}; neutron router-interface-add {{ neutron_router_name }} {{ neutron_subnetname }}
  tags:
    - neutron
    - container_test

- debug: msg="glance image has UUID {{ image_uuid.stdout }}"
  when: image_uuid is defined
  tags:
    - glance
    - container_test

- name: create test docker instance
  shell: . {{ keystone_filename }}; nova boot --flavor {{ nova_bootflavor }} --image {{ image_uuid.stdout }} --nic net-id={{ testnet_uuid.stdout }} {{ nova_bootname }}
  register: test_docker_create
  tags:
    - nova
    - container_test

- name: get test instance UUID
  shell: . {{ keystone_filename }}; nova list | grep 'ansible_docker_instance' | gawk -F' ' '{print $2}'
  register: test_instance_uuid
  when: test_docker_create|success
  tags:
    - nova
    - container_test

- debug: msg="ansible_docker_instance has nova UUID {{ test_instance_uuid.stdout }}"
  when: test_instance_uuid is defined
  tags:
    - nova
    - container_test
